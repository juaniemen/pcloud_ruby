c
response["tokens"].select do |m| 
                m["device"].include?("ruby") && 
                m["device"].include?("rest-client") &&
                !m["current"] # No current session
            end.map{|m| m["tokenid"]}
response
n
response
c
exit
c
response["tokens"].select do |m| 
                m["device"].include?("ruby") && 
                 m["current"]==true 
            end.map{|m| m["tokenid"]}
response["tokens"].select do |m| 
                m["device"].include?("ruby") && 
                 m["current"].include?(true) 
            end.map{|m| m["tokenid"]}
response["tokens"].select do |m| 
                m["device"].include?("ruby") && 
                 m["device"].include?("rest-client") 
            end.map{|m| m["tokenid"]}
response
n
c
response
n
c
response
n
token_ids
n
c
e.message
e
n
response
n
a
n
c
response["tokens"].select{|m| m["device"].include?("ruby/3.0")}.map{|m| m["tokenid"]}
n
c
tokens.each do |token|
tokens = response["tokens"].select{|m| m["device"].include?("ruby/3.0")}.map{|m| m["tokenid"]}
response["tokens"].select{|m| m["device"].include?("ruby/3.0")}.map{|m| m["tokenid"]}
response["tokens"].select{|m| m["device"].include?("ruby/3.0")}
response["tokens"]
y response
response response
response.to_yaml
response.last
response[0]
response[-1]
response[1]
response.first
response
response.values.last
response.values.las
response.last
response
n
c
response
n
params
c
response
n
self.token
c
puts b
b
n
auth.token
a
c
auth.auth
auth.token
auth
n
c
p b
b
n
c
e
n
a
n
c
auth.token
puts b
b
n
a
n
c
e
n
auth.login
n
exit
e
n
a
n
exit
EXIT
@email
c
ENV["PASSWORD"]
ENV["EMAIL"]
ENV
c
e
n
c
Dotenv.load(".dotenv_secrets")
Dotenv.load("../../.dotenv_secrets")
Dotenv.load("../.dotenv_secrets")
Dotenv.Dotenv.load("../.dotenv_secrets")
DOTENV
ENV["PASSWORD"]
Dotenv
ENV["EMAIL"]
ENV
c
@email
c
a
c
a
c
n
c
response
c
self.digest
c
self.digest
c
attr_reader
self.digest
c
self.get_digest
self.digest
password
sha1username
c
response
c
"pCloudpCloudpCloudZYE3oTwb4AUmZ3kfUi7ZN8Bi14M5KQJDx1lDPpNKC0".length
c
PcloudRuby::Client.get("getdigest")
c
n
c
PcloudRuby::Client.get("getdigest").body
PcloudRuby::Client.get("getdigest").response
PcloudRuby::Client.get("getdigest")
c
n
c
URI.join(self.root_url, resource_url).to_s
RestClient.get("https://eapi.pcloud.com/getdigest")
RestClient.get(URI.join(self.root_url, resource_url))
URI.join(self.root_url, resourc)
c
n
c
n
c
n
c
n
c
n
c
Client.get("getdigest")
